apiVersion: apps/v1
kind: Deployment
metadata: 
  name:  {{ .Values.api.name }}-deployment
  # namespace: my-namespace
spec:
  replicas: {{ .Values.api.replicas }}
  selector:  
    matchLabels:
      components: {{ .Values.api.components }}
  template: 
    metadata:
      labels: #нужны для связи пода с Service (у нас будет NodePort)
        components: {{ .Values.api.components }}
    spec: 
      containers:
        - name:  {{ .Values.api.name }}
          image:  "{{ .Values.api.image }}:{{ .Values.api.version }}"
          ports: # указываем порты, которые должны быть прокинуты из контейнера в под
            - containerPort: {{ .Values.api.port }}
          resources: # допустимые лимиты на контейнер
            limits: {{ .Values.api.limits | toYaml | nindent 14 }} # Указываем, что нужно преобразовать в yaml и указываем кол-во отступов с помощью nindent
          env:
            {{- range .Values.api.envs}}
            {{- $data := dict "name" $.Values.api.name "env" .}}
            {{- include "env.template" $data | indent 12}}
            {{- end}}
          volumeMounts:
            - name: test
              mountPath: /etc/test
              readOnly: true
          livenessProbe: # работает на протяжении всей жизни контейнера
            exec: 
              command: # успешно выполненные команды имеют код 0 (проверить с помощью echo $?), неуспешные > 0
                - curl
                - --fail # с --fail если статус код >= 400, то код команды будет 1
                - http://localhost:3000/api # в идеале должен быть вообще отдельный эндпоинт для healthcheck-а
            initialDelaySeconds: 120 # Столько ждем пока приложение инициализируется
            periodSeconds: 5 # Далее каждый 5 секунду делаем curl
            failureThreshold: 1 # Количество допустимых ошибок подряд, перед тем как мы скажем, что контейнер не работает
          