# контейнер имеет плавающий ip (после падения, ему присвоится другой ip) - он меняется
# поэтому используем сервисы, которые обеспечат доступ к ним


# NodePort позволяет прокинуть порт из контейнера наружу кластера
# ClusterIp - внутрь онли
# LoadBalancer использует NodePort под капотом, добавляя внешний (облачный чаще всего) балансировщик нагрузки для автоматического распределения входящего трафика

# Ingress - через доменное имя (Но ingress - это не тип сервиса !!!)

apiVersion: v1
kind: Service
metadata:
  name: short-app-port
spec: 
  type: NodePort
  ports: 
    - port: 3000 # это порт, по которому другие поды смогут достучаться до указанного пода
      targetPort: 80 # это порт, по которому обращаемся в под (conteinerPort в манифесте пода) - применяется для направления трафика внутри пода
      nodePort: 31200 # это порт, по которому пользователь обращается в кластер (из диапазона 30 000 - 32 676)
  selector: # означает, что будем стучаться в поды с определенным лейблом (components: frontend)
    components: frontend



# Предположим, у нас есть сервис типа NodePort с указанными портами:

# port: 80
# targetPort: 9376
# nodePort: 30007

# Внутренний доступ:
# Под A внутри кластера хочет обратиться к Поду B через сервис. Под A отправляет запрос на my-service:80.
# kube-proxy на ноде перенаправляет этот запрос на один из подов, которые соответствуют сервису, на порт 9376.

# Внешний доступ:
# Внешний клиент хочет обратиться к сервису. Он отправляет запрос на NODE_IP:30007.
# Запрос поступает на ноду кластера, и kube-proxy перенаправляет его на my-service:80, который затем перенаправляет на порт 9376 соответствующего пода.
